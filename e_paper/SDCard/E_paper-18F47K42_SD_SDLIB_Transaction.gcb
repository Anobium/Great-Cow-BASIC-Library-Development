'''A demonstration program for Explicit-Paper.
 '''-------------------------------------------------------------------------
' -------------------------------------------------------
 '''This has been tested using the hardware and software SPI option.

 '''*************************************************************************
' *******

     'Chip Settings.
     #define clock_freq 64
     #chip 18F47k42, clock_freq
     #config MCLRE = ON
     #option explicit
     '
     'Generated by PIC PPS Tool for Great Cow Basic
     'PPS Tool version: 0.0.5.25
     'PinManager data: Not available (3)
     'Generated for 18f25k42
     '
     'Template comment at the start of the config file
     '
     #startup InitPPS, 85
     #define PPSToolPart 18F45k42
     Sub InitPPS
         'This has been added to turn off PPS SPI when in SPI software mode
             'Module: UART1  (0x.... è in ESADECIMALE)
             U1RXPPS = 0x0017        'RC7 > RX1
             RC6PPS  = 0x0013        'TX1 > RC6
             #ifdef EPD2in13D_HardwareSPI
                 'Module: SPI1
                 SPI1SDIPPS = 0x0014     'RC4 > SDI1
                 RC5PPS = 0x001F         'SDO1 > RC5
                 RC3PPS = 0x001E         'SCK1 > RC3
                 SPI1SCKPPS = 0x0013     'RC3 > SCK1 (bi-directional)
             #endif
     End Sub

 '______________
 '   USART
     #define USART_BAUD_RATE 57600'9600
     #define USART_DELAY     5 ms
     #define USART_BLOCKING
     'Set pin USART directions
     Dir portC.7 IN
     Dir portC.6 OUT

 '******************************************************************************************************
 '  The following should be used   '#define EPD_EPD2in13D_HardwareSPI     'remove comment out if you want to use software SPI.
     #define EPD2in13D_HardwareSPI
     #define SPI_BAUD_RATE_REGISTER 7 '**********||||||****|||****|

 '***************************************************************************
' ***************************

    'Setup the E-Paper
     #include "Sertxd.h"
     #include <glcd.h>
     #include "MySDLib.h"
'     #include <xpt2046.h>    'include per il touch driver di ili9341
     #define GLCD_TYPE GLCD_TYPE_EPD_EPD2in13D
     #define GLCD_EXTENDEDFONTSET1

'     NONE GLCD_TYPE_EPD2in13D_LOWMEMORYx_GLCD_MODE def.==>'BuffWidth=2756,n_page=1
'     #define GLCD_TYPE_EPD2in13D_LOWMEMORY1_GLCD_MODE ON  'BuffWidth=13,  n_page=212
'     #define GLCD_TYPE_EPD2in13D_LOWMEMORY2_GLCD_MODE ON  'BuffWidth=104, n_page=26
     #define GLCD_TYPE_EPD2in13D_LOWMEMORY3_GLCD_MODE ON  'BuffWidth=208, n_page=13
'     #define GLCD_TYPE_EPD2in13D_LOWMEMORY4_GLCD_MODE ON  'BuffWidth=1378,n_page=2

     'Pin mappings for SPI - this GLCD driver supports Hardware SPI and Software SPI

 'ERV These need to GLCD_DC ETC = was wrong naming convention
     #define GLCD_DC     portA.0   ' Data(hight)/ command(low) line
     #define GLCD_CS     portC.1   ' Chip select line (negate)
     #define GLCD_RESET  portD.2   ' Reset line       (negate)
     #define GLCD_DO     portC.5   ' GLCD MOSI connect to MCU SDO
     #define GLCD_SCK    portC.3   ' Clock Line
     #define GLCD_Busy   portC.0   ' Busy Line

'--------------*-----------------*------------------*-----------------*--
    'Setup SD pins (sono presenti sia l'EPD2in13D card adapter che
    '                                un HW SD Card Adapter chip)

    #define SD_Adaper_CS  portD.7   ' SD-Adapter select line
    #define SD_DO         portC.5   ' MOSI connect to MCU SDO
    #define SD_SCK        portC.3   ' Clock Line
    #define SD_DI         portC.4   ' MISO connect to MCU SDI
    Dir     SD_Adaper_CS  OUT
    Dir     SD_DO         OUT
    Dir     SD_SCK        OUT
    Dir     SD_DI         IN


'    GLCDRotate ( Landscape_rev )     ' optionally you can rotate the screen.

    Dim Inf_Addr_Buff, SDBuff_ind  as word
    Dim Main_counter, Main_Counter1, Main_Counter2, Main_Counter3 as Word
    Dim Main_Ind, Main_Ind_trans as word
    Dim Main_MyString, Main_MyString1 as String


 '******************************************************************************************************
     'Main program

    HSerPrint CHR(12)           'Clear Serial terminal

    sertxd(1,"==============","E-Paper EPD2in13(D)",0):sertxd(0,"===================","==",0)
    sertxd(1,"===================FontSize=", GLCDFontWidth,0):sertxd(0,"===================","==",0)

    dim upperPage, lowerPage as Byte
    upperPage = 0
    lowerPage = EPD_N_PAGE-1

    SET SD_Adaper_CS ON

Request:
    sertxd(1,"CARD already ","initialized? s/n ",0)
    HSerGetstring Main_MyString
    if Main_MyString<>"s" then

      SDInitialize                      'Card Initialization

    end if

    Partition_Entry_and_Relevant_Data 'Find Partition Entry and Partition Relevant Data

CARD_Operation_Root:
    Disk_Explorer(Cluster_Begin_LBA,"BOOT")  'Explore Directory and Files in BOOT
    SDLocation0=Cluster_Begin_LBA

CARD_Operation:
    Draw_Line(1,25," ")
    sertxd(0," MENU: "," ",0)
    sertxd(1,"     EXPLORE/EXECUTE: File or Directory"," ",0)
    sertxd(1,"  I) Fn= execute"," File num n",0)
    sertxd(1," II) Dn= Explore"," Directory num n",0)
    sertxd(1," III)En= Run Gra","ph Example num n",0)
    sertxd(1," VI) R = GO TO ROOT"," ",0)
    Draw_Line(1,10," "):sertxd(0,"  Please give your choice"," ",0)
    HSerGetstring Main_MyString
    if Main_MyString="R" or Main_MyString="r" then
      goto CARD_Operation_Root
    End if
    if Left(Main_MyString,1)<> "D" then
      if Left(Main_MyString,1)<> "F" then
        if Left(Main_MyString,1)<> "E" then
          goto CARD_Operation
        end if
      end if
    end if
'--------------------------------------

    SD_Counter=Val(Right(Main_MyString,Len(Main_MyString)-1))  'il numero può essere a più cifre!
    if Left(Main_MyString,1)<>"E" then
      if Left(Main_MyString,1)="D" then
        Record_Number=Dir_Record(SD_Counter)
      else
        Record_Number=File_Record(SD_Counter)   'N. del record di info
      end if
      IF VERBOSE="ON" then
        Draw_Line(2,20,"=")
        sertxd(1,"  The entry of the chosen File/Dir is  at Boot record n.",SDLocation,0)
        Draw_Line(2,20,"=")
      end if
      if Record_Number>15 then
          SDLocation=SDLocation0+(Record_Number/16)
          SDRead_Block(SDLocation)              'Nuovo settore che contiene le info
      end if
      SDByte=Record_number-(Record_Number/16)*16'N.record delle info nel nuovo settore
      SDByte=SDByte*32                          'n. record dell'info del file
      SDLocation=Record_number-(Record_Number/16)*16
      SDLocation=SdLocation*32          'Nota:questo valore era in SDByte (di appoggio)
      B0=SDDataBuffer(SDLocation+26)    ' ma e stato mofidificato da SDWrite_Block
      B1=SDDataBuffer(SDLocation+27)
      B2=SDDataBuffer(SDLocation+20)
      B3=SDDataBuffer(SDLocation+21)
      LSB_to_MSB(SDLocation)
      B3=SDLocation
      SDLocation=Cluster_Begin_LBA+(SDLocation-2)*N_Sector_per_cluster'indirizzo LBA inizio del file
      IF VERBOSE="ON" then
        Draw_Line(2,20,"=")
        sertxd(1,"  The choosen File/Dir is at cluster n.=",B3,0)
        sertxd(1,"  LBA Address of the chosen File/Dir=",SDLocation,0)
        Draw_Line(2,20,"=")
      End if
      if Left(Main_MyString,1)="D" then
        SDLocation0=SDLocation
        Disk_Explorer(SDLocation,Left(Main_MyString,SD_Counter1-1))

        goto CARD_Operation

      else

        Draw_Line(1,15," "):Draw_Line(1,60,"-")
        Draw_Line(1,15," "):sertxd(0,"A .bin File is assumed"," in the following",0)
        Draw_Line(1,60,"-"):Draw_Line(1,15," ")

        SDLocation_header=SDLocation
        sertxd(1,"  ===MAKING THE PICTURE"," ",1)

        GLCD_Open_PageTransaction ( upperPage, lowerPage )

        SET GLCD_CS ON
        SET SD_Adaper_CS OFF
        wait 2 ms

        SDLocation=SDLocation_header
        SDRead_Block(SDLocation)        'indirizzo in byte dell'header del file della immagine

        Inf_Addr_Buff=_GLCDPage*BuffWidth
        Main_Ind=0
        SDBuff_Ind=0
        for SD_Counter2=1 to GLCD_Height
          for SD_Counter3=1 to GLCD_Width8
            Main_Ind=Main_Ind+1           'allo 0 del SDData_Buffer corrisponde 1 EPDBuffer
            if SDBuff_Ind>511 then
              SDLocation=SDlocation+1
              SDRead_Block(SDLocation)
              SDBuff_ind=0
            end if
            Main_Ind_trans=Main_Ind-Inf_Addr_Buff
            if Main_Ind_trans<=BuffWidth then
              EPD_Buffer(Main_Ind_trans)=SDDataBuffer(SDBuff_Ind)
            end if
            SDBuff_Ind=SDBuff_Ind+1
          next
        next

        SET GLCD_CS OFF
        SET SD_Adaper_CS ON
        wait 2 ms

        GLCD_Close_PageTransaction                 'Close Transaction

        Draw_Line(1,15," "):Draw_Line(1,15," ")

      end if
    else

      SET SD_Adaper_CS ON

      GLCD_Open_PageTransaction ( upperPage, lowerPage )

      select case SD_Counter

        case 1   :   Box_example

        case 2   :   String_example

        case 3   :   BigString_example

        case 4   :   PrintString_example

        case 5   :   Complex_Graph_example

      end select

      GLCD_Close_PageTransaction                 'Close Transaction

      Draw_Line(1,15," "):Draw_Line(1,15," ")

    end if

    goto CARD_Operation_Root

end

'____________________________________________________________________________________

sub Box_example
        box 10, 10,GLCD_WIDTH-10, GLCD_HEIGHT-10
        box 20, 20,GLCD_WIDTH-20, GLCD_HEIGHT-20
        box 30, 30,GLCD_WIDTH-30, GLCD_HEIGHT-30
        Filledbox 40, 40,GLCD_WIDTH-40, GLCD_HEIGHT-40
end sub

sub String_example

    DrawString_EPD2in13D(2,2 ,"Caso Probabile")
    DrawString_EPD2in13D(2,12 ,"perché la rela")
    DrawString_EPD2in13D(2,22 ,"zione non era")
    DrawString_EPD2in13D(2,32 ,"attendibile.")
    DrawString_EPD2in13D(2,42 ,"Comunque la ")
    DrawString_EPD2in13D(2,52 ,"nuova versione")
    DrawString_EPD2in13D(2,62 ,"darà risultati")
    DrawString_EPD2in13D(2,72 ,"migliori?")
    DrawString_EPD2in13D(2,108,"Seconda Parte")
    DrawString_EPD2in13D(2,118,"dello schermo")
    DrawString_EPD2in13D(2,128,"con un buffer")
    DrawString_EPD2in13D(2,138,"ridotto. Si può")
    DrawString_EPD2in13D(2,148,"anche disegnare")
    DrawString_EPD2in13D(2,158,"fig. geometriche")

end sub

sub BigString_example



end sub

sub PrintString_example

dim xloop as byte
for xloop = 1 to 26
'GLCDPrintString ""
'GLCDPrintString "Line "
GLCDPrintStringLN Str(xloop)
next

end sub

sub Complex_Graph_example

    FilledBox_EPD2in13D( 4, 4,42, 42, GLCDForeground)  'Filled Rectangle
    FilledBox_EPD2in13D( 5, 5,41, 41, GLCDBackground)
    FilledBox_EPD2in13D( 6, 6,40, 40, GLCDForeground)
    FilledBox_EPD2in13D( 7, 7,39, 39, GLCDBackground)
    FilledBox_EPD2in13D( 8, 8,38, 38, GLCDForeground)
    FilledBox_EPD2in13D( 9, 9,37, 37, GLCDBackground)
    FilledBox_EPD2in13D(10,10,36, 36, GLCDForeground)
    FilledBox_EPD2in13D(11,11,35, 35, GLCDBackground)
    FilledBox_EPD2in13D(12,12,34, 34, GLCDForeground)
    FilledBox_EPD2in13D(13,13,33, 33, GLCDBackground)
    FilledBox_EPD2in13D(14,14,32, 32, GLCDForeground)
    FilledBox_EPD2in13D(15,15,31, 31, GLCDBackground)

    FilledCircle(77,25,23, GLCDForeground)              'Filled Circle
    FilledCircle(77,25,19, GLCDBackground)
    FilledCircle(77,25,14, GLCDForeground)
    FilledCircle(77,25,11, GLCDBackground)
    FilledCircle(77,25,5 , GLCDForeground)
    FilledCircle(77,25,2 , GLCDBackground)

    FilledEllipse(25,60,16,8, GLCDForeground)           'Filled Ellipse
    FilledEllipse(25,60,14,7, GLCDBackground)
    FilledEllipse(25,60,12,6, GLCDForeground)
    FilledEllipse(25,60,10,5, GLCDBackground)
    FilledEllipse(25,60,8 ,4, GLCDForeground)
    FilledEllipse(25,60,6, 3, GLCDBackground)

    FillRoundRect(50,50,100,100,GLCDForeground)         'Filled rounded
    FillRoundRect(55,55,95 ,95, GLCDBackground)
    FillRoundRect(60,60,90 ,90, GLCDForeground)
    FillRoundRect(65,65,85 ,85, GLCDBackground)
    FillRoundRect(70,70,80 ,80, GLCDForeground)
    FillRoundRect(75,75,75 ,75, GLCDBackground)
    FillRoundRect(80,80,80 ,80, GLCDForeground)

    FilledTriangle(25,70,2,102,46,102, GLCDForeground)  'Filled Triangle
    FilledTriangle(25,78,10,98,38,98 , GLCDBackground)
    FilledTriangle(25,86,18,94,30,94 , GLCDForeground)

    FilledBox_EPD2in13D( 8, 108,90,148, GLCDForeground) 'Filled rectangle
    FilledBox_EPD2in13D(18,118,80, 136, GLCDBackground)
    FilledBox_EPD2in13D(28,128,70, 126, GLCDForeground)

    DrawString_EPD2in13D(9,108 ,"Rectangle",GLCDBackground)
    DrawString_EPD2in13D(19,117 ,"Rectangle")
    DrawString_EPD2in13D(19,149 ,"Hyperbole")

    Hyperbole(50,181, 4, 2, 1,1, GLCDForeground)        'Hyperbole
    Hyperbole(50,181, 6, 3, 1,1, GLCDBackground)
    Hyperbole(50,181,10, 5, 1,1, GLCDForeground)
    Hyperbole(50,181,14, 7, 1,1, GLCDBackground)
    Hyperbole(50,181,18, 9, 1,1, GLCDForeground)
    Hyperbole(50,181,22,11, 1,1, GLCDBackground)
    Hyperbole(50,181,26,13, 1,1, GLCDForeground)
    Hyperbole(50,181,30,15, 1,1, GLCDBackground)
    Hyperbole(50,181,34,17, 1,1, GLCDForeground)

end sub
