'''A demonstration program for Explicit-Paper.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This has been tested using the hardware and software SPI option.

'''********************************************************************************

    'Chip Settings.
    #define clock_freq 64
    #chip 18F47k42, clock_freq
    #config MCLRE = ON
    #option explicit
    '
    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.25
    'PinManager data: Not available (3)
    'Generated for 18f25k42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F45k42
    Sub InitPPS
        'This has been added to turn off PPS SPI when in SPI software mode
            'Module: UART1  (0x.... è in ESADECIMALE)
            U1RXPPS = 0x0017        'RC7 > RX1
            RC6PPS  = 0x0013        'TX1 > RC6
            'Module: SPI1
            SPI1SDIPPS = 0x0014     'RC4 > SDI1
            RC5PPS = 0x001F         'SDO1 > RC5
            RC3PPS = 0x001E         'SCK1 > RC3
            SPI1SCKPPS = 0x0013     'RC3 > SCK1 (bi-directional)
    End Sub

'______________
'   USART
    #define USART_BAUD_RATE 9600
    #define USART_DELAY     5 ms
    #define USART_BLOCKING
    'Set pin USART directions
    Dir portC.7 IN
    Dir portC.6 OUT

'******************************************************************************************************
    'Setup the E-Paper

    'Pin mappings for SPI - this GLCD driver supports Hardware SPI and Software SPI
    #define EPD_DC     portA.0   ' Data(hight)/ command(low) line
    #define EPD_CS     portC.1   ' Chip select line
    #define EPD_RESET  portD.2   ' Reset line
    #define EPD_DO     portC.5   ' GLCD MOSI connect to MCU SDO
    #define EPD_SCK    portC.3   ' Clock Line
    #define EPD_Busy   portC.0
    Dir   EPD_DC     OUT
    Dir   EPD_CS     OUT
    Dir   EPD_RESET  OUT
    Dir   EPD_DO     OUT
    Dir   EPD_SCK    OUT
    Dir   EPD_Busy   IN


    #include <Myglcd.h>
    #include <EPD_EPD2in13D.h>
    #define GLCD_TYPE EPD_EPD2in13D
    #define GLCD_EXTENDEDFONTSET1
    GLCDfntDefaultsize = 1
    GLCDFontWidth=5

    '#define Hardware SPI
    #define SPI_HardwareSPI
    SPIMode ( MasterFast,0)
    #define SPI_BAUD_RATE_REGISTER 7 '**********||||||****|||****|
    '______________


    '******************************************************************************************************
    'Main program

    wait 100 ms

    #define BuffWidth 2756
    Dim ind, counter, ind_raw, ind_col as word
    Dim Data, dummy, VERBOSE as byte
    Dim EPD_Black, EPD_White, EPD_Background, EPD_Foreground as Byte
    Dim EPD_Width, EPD_Height, EPD_Width8 as Word
    Dim x_min, x_max, y_min, y_max as Word
    Dim EPD_Buffer(BuffWidth)
    Dim MyString, MyString1 as String


Main:

    VERBOSE=0
    EPD_Width=104
    EPD_Height=212
    EPD_width8=EPD_Width/8
    EPD_Black=0
    EPD_White=0xFF
    EPD_Background=EPD_Black
    EPD_Foreground=EPD_White


    Reset_EPD2in13D

    wait 200 ms


    Init_EPD2in13D


    LoadLUTS_EPD2in13D


    Clear_EPD2in13D

'    DisplayGrid_EPD2in13D

    HSerGetString MyString

    if MyString="g" then
      Grafica
    else if MyString="t" then
      Testo
    else
      BigTesto
    end if


    Sleep_EPD2in13D

    HSerGetString MyString
    if MyString="s" then
     goto main
    end if
End

sub DisplayGrid_EPD2in13D

    SendCommand_EPD2in13D(Data_Trasmission_1)
    wait 2 ms
    for ind_raw=1 to EPD_Height
      for ind_col=1 to EPD_width
        SendData_EPD2in13D(Foreground)
      next
    next
    wait 10 ms
    SendCommand_EPD2in13D(Data_Trasmission_2)
    wait 2 ms
    counter=0
    ind=EPD_Height*EPD_width8
    for ind_raw=1 to ind
       counter=counter+1
       if counter>=105 and counter <117  then
        SendData_EPD2in13D(EPD_Black)
       else if counter=117 then
        SendData_EPD2in13D(EPD_Black)
        counter=0
       else
        SendData_EPD2in13D(0xFE)
       end if
    next
    wait 10 ms

    Refresh_EPD2in13D

end sub

sub   DisplayPixels_EPD2in13D

    SendCommand_EPD2in13D(Data_Trasmission_1)
    wait 2 ms
    for ind_raw=1 to EPD_Height
      for ind_col=1 to EPD_width
        SendData_EPD2in13D(EPD_Background)
      next
    next
      wait 10 ms

    SendCommand_EPD2in13D(Data_Trasmission_2)
    wait 2 ms

    counter=0
    ind=EPD_Height*EPD_width8
    for ind_raw=1 to ind
      SendData_EPD2in13D(EPD_Buffer(ind_raw))
    next
    wait 10 ms

    Refresh_EPD2in13D

end sub

sub   Testo

    Clear_Buffer
    Clear_EPD2in13D
    Make_Buffer_Text(2,2,"Caso Probabile")
    Make_Buffer_Text(2,12,"perché la rela")
    Make_Buffer_Text(2,22,"zione non era")
    Make_Buffer_Text(2,32,"attendibile.")
    Make_Buffer_Text(2,42,"Comunque la ")
    Make_Buffer_Text(2,52,"nuova versione")
    Make_Buffer_Text(2,62,"darà risultati")
    Make_Buffer_Text(2,72,"migliori?")
    Make_Buffer_Text(2,108,"Seconda Parte")
    Make_Buffer_Text(2,118,"dello schermo")
    Make_Buffer_Text(2,128,"con un buffer")
    Make_Buffer_Text(2,138,"ridotto. Si può")
    Make_Buffer_Text(2,148,"anche disegnare")
    Make_Buffer_Text(2,158,"fig. geometriche")

    DisplayPixels_EPD2in13D
    Clear_EPD2in13D
end sub

sub   BigTesto

    Clear_Buffer
    Clear_EPD2in13D
    Make_Buffer_BigTest(2,2, " Vela ")
    Make_Buffer_BigTest(2,18," MARE ")
    Make_Buffer_BigTest(2,34," Cielo")
    Make_Buffer_BigTest(2,50," Verde")
    Make_Buffer_BigTest(2,66," Luce ")
    Make_Buffer_BigTest(2,82," BIANCO")
    Make_Buffer_BigTest(2,108,"Nuovo")
    Make_Buffer_BigTest(2,124,"II Parte")
    Make_Buffer_BigTest(2,140,"schermo")
    Make_Buffer_BigTest(2,156,"ridotto ")
    Make_Buffer_BigTest(2,172,"disegna")
    Make_Buffer_BigTest(2,188,"cerchio")

    DisplayPixels_EPD2in13D

end sub
sub   Grafica


    Clear_Buffer
    Clear_EPD2in13D
    Make_Buffer_Graf( 4, 4,42, 42,0,0,1, GLCDForeground)
    Make_Buffer_Graf( 5, 5,41, 41,0,0,1, GLCDBackground)
    Make_Buffer_Graf( 6, 6,40, 40,0,0,1, GLCDForeground)
    Make_Buffer_Graf( 7, 7,39, 39,0,0,1, GLCDBackground)
    Make_Buffer_Graf( 8, 8,38, 38,0,0,1, GLCDForeground)
    Make_Buffer_Graf( 9, 9,37, 37,0,0,1, GLCDBackground)
    Make_Buffer_Graf(10,10,36, 36,0,0,1, GLCDForeground)
    Make_Buffer_Graf(11,11,35, 35,0,0,1, GLCDBackground)
    Make_Buffer_Graf(12,12,34, 34,0,0,1, GLCDForeground)
    Make_Buffer_Graf(13,13,33, 33,0,0,1, GLCDBackground)
    Make_Buffer_Graf(14,14,32, 32,0,0,1, GLCDForeground)
    Make_Buffer_Graf(15,15,31, 31,0,0,1, GLCDBackground)

    Make_Buffer_Graf(77,25,23,0,0,0,2,GLCDForeground)
    Make_Buffer_Graf(77,25,19,0,0,0,2,GLCDBackground)
    Make_Buffer_Graf(77,25,14,0,0,0,2,GLCDForeground)
    Make_Buffer_Graf(77,25,11,0,0,0,2,GLCDBackground)
    Make_Buffer_Graf(77,25,5 ,0,0,0,2,GLCDForeground)
    Make_Buffer_Graf(77,25,2 ,0,0,0,2,GLCDBackground)

    Make_Buffer_Graf(25,60,16,8,0,0,4,GLCDForeground)
    Make_Buffer_Graf(25,60,14,7,0,0,4,GLCDBackground)
    Make_Buffer_Graf(25,60,12,6,0,0,4,GLCDForeground)
    Make_Buffer_Graf(25,60,10,5,0,0,4,GLCDBackground)
    Make_Buffer_Graf(25,60,8,4, 0,0,4,GLCDForeground)
    Make_Buffer_Graf(25,60,6,3,0,0, 4,GLCDBackground)

    Make_Buffer_Graf(50,50,100,100,0,0,3, GLCDForeground)
    Make_Buffer_Graf(55,55,95,95,  0,0,3, GLCDBackground)
    Make_Buffer_Graf(60,60,90,90,  0,0,3, GLCDForeground)
    Make_Buffer_Graf(65,65,85,85,  0,0,3, GLCDBackground)
    Make_Buffer_Graf(70,70,80,80,  0,0,3, GLCDForeground)
    Make_Buffer_Graf(75,75,75,75,  0,0,3, GLCDBackground)
    Make_Buffer_Graf(80,80,80,80,  0,0,3, GLCDForeground)

    Make_Buffer_Graf(25,70,2,102,  46,102,6, GLCDForeground)
    Make_Buffer_Graf(25,78,10,98,  38,98, 6, GLCDBackground)
    Make_Buffer_Graf(25,86,18,94,  30,94, 6, GLCDForeground)

    Make_Buffer_Graf( 8, 108,90, 148,0,0,1,GLCDForeground)
    Make_Buffer_Graf(18,118,80, 136,0,0,1, GLCDBackground)
    Make_Buffer_Graf(28,128,70, 126,0,0,1, GLCDForeground)

    Make_Buffer_Graf(50,181, 4, 2, 0,0,5, GLCDForeground)
    Make_Buffer_Graf(50,181, 6, 3, 0,0,5, GLCDBackground)
    Make_Buffer_Graf(50,181,10, 5, 0,0,5, GLCDForeground)
    Make_Buffer_Graf(50,181,14, 7, 0,0,5, GLCDBackground)
    Make_Buffer_Graf(50,181,18, 9, 0,0,5, GLCDForeground)
    Make_Buffer_Graf(50,181,22,11, 0,0,5, GLCDBackground)
    Make_Buffer_Graf(50,181,26,13, 0,0,5, GLCDForeground)
    Make_Buffer_Graf(50,181,30,15, 0,0,5, GLCDBackground)
    Make_Buffer_Graf(50,181,34,17, 0,0,5, GLCDForeground)

    DisplayPixels_EPD2in13D(2)

end sub

sub Make_Buffer_Text(in x0 as Word, in y0 as Word, in string_in as String)

    DrawString_EPD2in13D(x0,y0,String_in)

end sub

sub Make_Buffer_BigTest(in x0 as Word, in y0 as Word, in string_in as String)

    BigPrint_EPD2in13D(x0,y0,String_in)

end sub

sub Make_Buffer_Graf(in x_min as Word, in y_min as Word, in x_max as Word, in y_max as Word, in xx3 as word, in yy3 as word, in Type as byte, in LineColor as Word)

    Dim x0, y0, a_x, b_y, radius as word

    Select Case Type
    case 1
      FilledBox_EPD2in13D(x_min, y_min, x_max, y_max, LineColor)
    case 2
      x0=x_min: y0=y_min: radius=x_max
      FilledCircle(x0, y0, radius, LineColor)
    case 3
      FillRoundRect(x_min, y_min, x_max, y_max, LineColor)
    case 4
      x0=x_min: y0=y_min: a_x=x_max: b_y=y_max
      FilledEllipse(x0, y0, a_x, b_y, LineColor)
    case 5
      x0=x_min: y0=y_min: a_x=x_max
      Hyperbole(x0, y0, a_x, b_y, 1, 1, LineColor)
    case 6
      FilledTriangle(x_min, y_min, x_max, y_max, xx3, yy3, LineColor)
    End Select

end sub

sub Clear_Buffer
    for ind_raw=1 to BuffWidth
      EPD_Buffer(ind_raw)=EPD_Background
    next
end sub
