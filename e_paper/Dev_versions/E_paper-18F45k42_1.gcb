'''A demonstration program for Explicit-Paper.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This has been tested using the hardware and software SPI option.

'''********************************************************************************

    'Chip Settings.
    #define clock_freq 64
    #chip 18F45k42, clock_freq
    #config MCLRE = ON
    #option explicit
    '
    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.25
    'PinManager data: Not available (3)
    'Generated for 18f25k42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F45k42
    Sub InitPPS
        'This has been added to turn off PPS SPI when in SPI software mode
            'Module: UART1  (0x.... è in ESADECIMALE)
            U1RXPPS = 0x0017        'RC7 > RX1
            RC6PPS  = 0x0013        'TX1 > RC6
            'Module: SPI1
            SPI1SDIPPS = 0x0014     'RC4 > SDI1
            RC5PPS = 0x001F         'SDO1 > RC5
            RC3PPS = 0x001E         'SCK1 > RC3
            SPI1SCKPPS = 0x0013     'RC3 > SCK1 (bi-directional)
    End Sub

'______________
'   USART
    #define USART_BAUD_RATE 9600
    #define USART_DELAY     5 ms
    #define USART_BLOCKING
    'Set pin USART directions
    Dir portC.7 IN
    Dir portC.6 OUT

'******************************************************************************************************
    'Setup the E-Paper

    'Pin mappings for SPI - this GLCD driver supports Hardware SPI and Software SPI
    #define EPD_DC     portA.0   ' Data(hight)/ command(low) line
    #define EPD_CS     portC.1   ' Chip select line
    #define EPD_RESET  portD.2   ' Reset line
    #define EPD_DO     portC.5   ' GLCD MOSI connect to MCU SDO
    #define EPD_SCK    portC.3   ' Clock Line
    #define EPD_Busy   portC.0
    Dir   EPD_DC     OUT
    Dir   EPD_CS     OUT
    Dir   EPD_RESET  OUT
    Dir   EPD_DO     OUT
    Dir   EPD_SCK    OUT
    Dir   EPD_Busy   IN

    #include <Sertxt.h>
    #include <Myglcd.h>
    #include <EPD_EPD2in13D.h>
    #define GLCD_TYPE EPD_EPD2in13D
    #define GLCD_EXTENDEDFONTSET1
    GLCDfntDefaultsize = 1
    GLCDFontWidth=5
'    GLCDRotate ( Landscape_rev )     ' optionally you can rotate the screen.

    '#define Hardware SPI
    #define SPI_HardwareSPI
    SPIMode ( MasterFast,0)
    #define SPI_BAUD_RATE_REGISTER 7 '**********||||||****|||****|
    '______________
    'Terminal commands
    #define ESC   chr(27)               'pag 530 manuale GCB
    #define CLS   HSerPrint(ESC+"[2J")
    #define CLS_CoolTerm hserprint CHR(12)
    #define HOME  HSerPrint(ESC+"[H")
    '_______________
    '

    '******************************************************************************************************
    'Main program
    CLS_CoolTerm
    wait 500 ms

    Dim ind, counter, ind_raw, ind_col as word
    Dim Data, dummy, VERBOSE as byte
    Dim EPD_Black, EPD_White, EPD_Background, EPD_Foreground as Byte
    Dim EPD_Width, EPD_Height, EPD_Width8 as Word
    Dim x_min, x_max, y_min, y_max as Word
    Dim EPD_Buffer(1380)
    Dim MyString, MyString1 as String

sertxd(1,"==============","E-Paper EPD2in13(D)",0):sertxd(0,"===================","==",0)
sertxd(1,"===================FontSize=", GLCDFontWidth,0):sertxd(0,"===================","==",0)
Main:

    VERBOSE=0
    EPD_Width=104
    EPD_Height=212
    EPD_width8=EPD_Width/8
    EPD_Black=0
    EPD_White=0xFF            'lungo x ogni bit associato ad un pixel
    EPD_Background=EPD_Black
    EPD_Foreground=EPD_White

    sertxd(1,"---RESET"," ",0)

    Reset_EPD2in13D

    wait 200 ms

    sertxd(1,"---INIT"," ",0)

    Init_EPD2in13D

    sertxd(1,"---LOAD LUTS"," ",0)

    LoadLUTS_EPD2in13D

    sertxd(1,"---CLEAR SCREEN"," ",0)

    Clear_EPD2in13D

'    DisplayGrid_EPD2in13D

    sertxd(1,"GRafica (g) , testo (t) , Bigtesto (b)?"," s ",0)
    HSerGetString MyString

    if MyString="g" then
      Grafica
    else if MyString="t" then
      Testo
    else
      BigTesto
    end if

    sertxd(1,"---EPD SLEEP"," ",0)

    Sleep_EPD2in13D

    sertxd(1,"continua?"," s ",0)
    HSerGetString MyString
    if MyString="s" then
     goto main
    end if
End

sub DisplayGrid_EPD2in13D

    sertxd(1,"---Display Frame"," ",0)
    sertxd(1,"   Data Trasmission 1 Command"," ",0)
    SendCommand_EPD2in13D(Data_Trasmission_1)
    wait 2 ms
    for ind_raw=1 to EPD_Height
      for ind_col=1 to EPD_width
        SendData_EPD2in13D(Foreground)
      next
    next
    wait 10 ms
    sertxd(1,"   Data Trasmission 2 Command"," ",0)
    SendCommand_EPD2in13D(Data_Trasmission_2)
    wait 2 ms
    counter=0
    ind=EPD_Height*EPD_width8
    for ind_raw=1 to ind
       counter=counter+1
       if counter>=105 and counter <117  then
        SendData_EPD2in13D(EPD_Black)
       else if counter=117 then
        SendData_EPD2in13D(EPD_Black)           'ogni bit basso
        counter=0
       else
        SendData_EPD2in13D(0xFE)           'solo primo bit basso
       end if
    next
    wait 10 ms

    Refresh_EPD2in13D

end sub

sub   DisplayPixels_EPD2in13D( in mode as byte)

    sertxd(1,"---Display String"," ",0):sertxd(0," Mode=",mode,0)
    if mode = 1 then
      sertxd(1,"   Data Trasmission 1 Command"," ",0)
      SendCommand_EPD2in13D(Data_Trasmission_1)
      wait 2 ms
      for ind_raw=1 to EPD_Height
        for ind_col=1 to EPD_width
          SendData_EPD2in13D(EPD_Background)
        next
      next
      wait 10 ms

    sertxd(1,"   Data Trasmission 2 Command"," ",0)
    SendCommand_EPD2in13D(Data_Trasmission_2)
    wait 2 ms
    end if

    counter=0
    ind=EPD_Height*EPD_width8
    ind=ind/2
    for ind_raw=1 to ind
      SendData_EPD2in13D(EPD_Buffer(ind_raw))
    next
    wait 10 ms

    if mode <>1 then
        Refresh_EPD2in13D
    end if

end sub

sub   Testo

    Clear_Buffer
    Clear_EPD2in13D
    Make_Buffer_Text(2,2,"Caso Probabile")
    Make_Buffer_Text(2,12,"perché la rela")
    Make_Buffer_Text(2,22,"zione non era")
    Make_Buffer_Text(2,32,"attendibile.")
    Make_Buffer_Text(2,42,"Comunque la ")
    Make_Buffer_Text(2,52,"nuova versione")
    Make_Buffer_Text(2,62,"darà risultati")
    Make_Buffer_Text(2,72,"migliori?")
    DisplayPixels_EPD2in13D(1)
    Clear_Buffer
    Make_Buffer_Text(2,2,"Seconda Parte")
    Make_Buffer_Text(2,12,"dello schermo")
    Make_Buffer_Text(2,22,"con un buffer")
    Make_Buffer_Text(2,32,"ridotto. Si può")
    Make_Buffer_Text(2,42,"anche disegnare")
    Make_Buffer_Text(2,52,"fig. geometriche")
    DisplayPixels_EPD2in13D(2)

end sub

sub   BigTesto

    Clear_Buffer
    Clear_EPD2in13D
    Make_Buffer_BigTest(2,2, " Vela ")
    Make_Buffer_BigTest(2,18," MARE ")
    Make_Buffer_BigTest(2,34," Cielo")
    Make_Buffer_BigTest(2,50," Verde")
    Make_Buffer_BigTest(2,66," Luce ")
    Make_Buffer_BigTest(2,82," BIANCO")

    DisplayPixels_EPD2in13D(1)

    Clear_Buffer
    Make_Buffer_BigTest(2,2,"Nuovo")
    Make_Buffer_BigTest(2,18,"II Parte")
    Make_Buffer_BigTest(2,34,"schermo")
    Make_Buffer_BigTest(2,50,"ridotto ")
    Make_Buffer_BigTest(2,66,"disegna")
    Make_Buffer_BigTest(2,82,"cerchio")
    DisplayPixels_EPD2in13D(2)

end sub
sub   Grafica

'   type=1 Filled Box
'        2 Filled circle
'        3 Round rectangle
'        4 Round Ellipse
'        5 Hyperbole
'        6 Parabole
    Clear_Buffer
    Clear_EPD2in13D
    Make_Buffer_Graf( 4, 4,42, 42, GLCDForeground)'Filled Rectangle
    Make_Buffer_Graf( 5, 5,41, 41, GLCDBackground)' 4+2 input
    Make_Buffer_Graf( 6, 6,40, 40, GLCDForeground)'2 inputs dummy
    Make_Buffer_Graf( 7, 7,39, 39, GLCDBackground)
    Make_Buffer_Graf( 8, 8,38, 38, GLCDForeground)
    Make_Buffer_Graf( 9, 9,37, 37, GLCDBackground)
    Make_Buffer_Graf(10,10,36, 36, GLCDForeground)
    Make_Buffer_Graf(11,11,35, 35, GLCDBackground)
    Make_Buffer_Graf(12,12,34, 34, GLCDForeground)
    Make_Buffer_Graf(13,13,33, 33, GLCDBackground)
    Make_Buffer_Graf(14,14,32, 32, GLCDForeground)
    Make_Buffer_Graf(15,15,31, 31, GLCDBackground)


    DisplayPixels_EPD2in13D(1)

    Clear_Buffer
    Make_Buffer_Graf( 8, 2,90, 40, GLCDForeground)'filled rectangle
    Make_Buffer_Graf(18,12,80, 30, GLCDBackground)'4+2 inputs
    Make_Buffer_Graf(28,22,70, 20, GLCDForeground)'2 inputs dummy




    DisplayPixels_EPD2in13D(2)

end sub

sub Make_Buffer_Text(in x0 as Word, in y0 as Word, in string_in as String)

    DrawString_EPD2in13D(x0,y0,String_in)   'costruisce il nuovo buffer

end sub

sub Make_Buffer_BigTest(in x0 as Word, in y0 as Word, in string_in as String)

    BigPrint_EPD2in13D(x0,y0,String_in)   'costruisce il nuovo buffer

end sub

sub Make_Buffer_Graf(in x_min as Word, in y_min as Word, in x_max as Word, in y_max as Word,  in LineColor as Word)

    Dim x0, y0, a_x, b_y, radius as word

      FilledBox_EPD2in13D(x_min, y_min, x_max, y_max, LineColor)

end sub

sub Clear_Buffer
    for ind_raw=1 to 1380                 'ripulisce il buffer
      EPD_Buffer(ind_raw)=EPD_Background
    next
end sub

