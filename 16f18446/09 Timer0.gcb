'''
'''******************************************************************
'''  Lesson 9 - "Timer0"
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC18, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs rotate from right to left, similar to Lesson 3, at a rate of ~.5 seconds.
'''
'''  PIC: 16f18446
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 28.4.2018
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''

 #chip 16f18446, 32
 #config MCLRE_OFF

    dir portc out
    portc = 0
    portc.5 = 1

'   Initialise the timer.
'   Firstly tell the compiler to use a 16bit timer for this demonstration
    #define TMR0_16BIT

'     For this we need the following:
'       Prescaler
'           1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'           1:2
    InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2
'     Start the Timer
    StartTimer 0

    'Every 1 sec
    Settimer ( 0 , 0x0bdc  )

    do

      wait while !TMR0IF
      TMR0IF = 0
      Set C off
      Rotate portc right
      if C = 1 then portc.3 = 1

      'Set timer to 1s before the next event occurs.  This as close as you can get to 1s
      Settimer ( 0 , 0x0bdc )

    loop
