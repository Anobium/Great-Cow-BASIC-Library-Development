'''
'''******************************************************************
'''  Lesson 14 - "Reversible with Interrupt"
'''
'''  This lesson combines all of the previous lessons in using the button to reverse the
'''  direction of rotation when the button is pressed using an Interrupt. The speed of rotation is controlled
'''  using the potentiometer.
'''
'''  The program needs to keep track of rotation direction and new code needs to be added
'''  to rotate in the other direction. Lesson 5 rotates right and checks for a '1' in the carry
'''  bit to determine when to restart the sequence. In Lesson 7, the program needs to rotate
'''  both ways and check for a '1' in bit 4 of the display when rotating to the left. When the
'''  '1' shows up in bit 4 of LATC, it will be re-inserted into bit  0 .
'''
'''
'''  LEDs will rotate at a speed that is proportional to the ADC value. The switch will toggle
'''  the direction of the LEDs
'''
'''  PIC: 18F14K22,8
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 28.4.2018
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''


 #Chip 18F14K22, 8
 #option explicit
 #config MCLRE_OFF

 #define PULL_UPS                                  'if this is uncommented, the trace under JP5 can be cut
                                                    'with no affect on the output

   'This script allows for the voltage drop and compensates of any losses.
   #script
          'reference voltage                        5v
          'actual voltage at port when 100% Pot     4.15
          'adc max                                  1023
          'number of graduations requried           15
          reference_voltage = 4.15
          vcc = 5
          numberofgrads = 15
          maxADC = 1023
          ADC_adjustment = int((reference_voltage*100)/(vcc*10))
          ADC_adjustment = int(ADC_adjustment * maxADC / numberofgrads / 10 )

   #endscript

   #ifdef PULL_UPS
    'enable the weak pull-up for the switch
    WPUA2 = 1
  #endif

  Dim _DIRECTION as Byte

  #define SWITCH_DOWN         0
  #define SWITCH_UP           1

  #define LED_RIGHT           TRUE
  #define LED_LEFT            FAlSE

  #define SWITCH      PORTA.3

  dim mydelay as byte

  'start from the right to left
  _direction = LED_RIGHT

  dir portc out
  portc.3 = 1

  'Potentiamtor is connected to RA4...set as input
  dir porta.0 in

  'setup switch (SW1)
  dir porta.3 in

  'setup Interrupt
  IOCA3 = 1
  On Interrupt PORTChange  Call InterruptHandler

  do
      mydelay = ReadAD10 ( AN0 )  / ADC_adjustment
     ' decrement the 8 MSbs of the ADC and delay 20ms for each
      do while ( mydelay <> 0 )
            mydelay--
            wait 20 ms
      loop

      if  _direction = LED_RIGHT  then
          'shift to the right by 1
          Set C off
          Rotate portc right

          ' when the last LED is lit, restart the pattern
          if C = 1 then
             portc.3 = 1
          end if

      else
          'shift to the left by 1
          Set C off
          Rotate portc left

          'when the last LED is lit, restart the pattern
          if  portC.4 = 1 then
                portC.0 = 1
                portC.4 = 0
          end if
      end if

  loop




sub InterruptHandler

    if  RABIF = 1 then                         ' SW1 was just pressed
        RABIF = 0                              ' must clear the flag in software
        wait 5 ms                              ' debounce by waiting and seeing if still held down
        if ( SWITCH = SWITCH_DOWN ) then
            _direction = 1 XOR _direction     ' change directions
        end if
    end if

end sub
