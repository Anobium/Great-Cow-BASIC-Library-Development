    'Chip Settings.
    #chip 18F45k42, 64
    #config MCLRE = ON
    #option explicit
    #include <glcd.h>
    #include <xpt2046.h>
    '
    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.25
    'PinManager data: Not available (3)
    'Generated for 18f25k42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F45k42
    Sub InitPPS
            'Module: UART1
            U1RXPPS = 0x0017        'RC7 > RX1
            RC6PPS  = 0x0013        'TX1 > RC6
        #ifdef ILI9341_hardwarespi
            'Module: SPI1
            SPI1SDIPPS = 0x0014     'RC4 > SDI1
            RC5PPS = 0x001F         'SDO1 > RC5
            RC3PPS = 0x001E         'SCK1 > RC3
            SPI1SCKPPS = 0x0013     'RC3 > SCK1 (bi-directional)
        #endif
    End Sub

    #define GLCD_TYPE GLCD_TYPE_ILI9341

'______________
'   UART
    #define USART_BAUD_RATE 9600
    #define USART_DELAY     5 ms
    #define USART_BLOCKING
    'Set pin USART directions
    Dir portC.7 IN
    Dir portC.6 OUT

'******************************************************************************************************
    'Setup the GLCD

    #define ILI9341_HardwareSPI

    'Pin mappings for SPI - this GLCD driver supports Hardware SPI and Software SPI
    #define GLCD_DC     portA.0   ' Data command/line
    #define GLCD_CS     portC.1   ' Chip select line
    #define GLCD_RESET  portC.0   ' Reset line
    #define GLCD_DO     portC.5   ' GLCD MOSI connect to MCU SDO
    #define GLCD_SCK    portC.3   ' Clock Line
    Dir   GLCD_DC     OUT
    Dir   GLCD_CS     OUT
    Dir   GLCD_RESET  OUT
    Dir   GLCD_DO     OUT
    Dir   GLCD_SCK    OUT

    #define SPI_BAUD_RATE_REGISTER 2

'--------------*-----------------*------------------*-----------------*--
    'Setup the XPT2046 (240x320 PIXELS)

    #define XPT2046_HardwareSPI      ' Hardware Touch Chip

    #define XPT2046XMIN    11        '15
    #define XPT2046YMIN    15        '14
    #define XPT2046XMAX    117       '110
    #define XPT2046YMAX    117       '113
    #define XPT2046_ReadSamples 15

    #define XPT2046_DI       portC.4 ' TOUCH MISO Connect to MCU SDI
    #define XPT2046_DO       portC.5 ' TOUCH MOSI connect to MCU SDO
    #define XPT2046_SCK      portC.3 ' Clock Line
    #define XPT2046_CS       portC.2 ' Touch Chip select line
    #define XPT2046_IRQ      PORTA.1 ' Pen Interrupt
    Dir XPT2046_DI    IN
    Dir XPT2046_DO    OUT
    Dir XPT2046_SCK   OUT
    Dir XPT2046_CS    OUT
    Dir XPT2046_IRQ   IN

    '******************************************************************************************************

    'Main program

    GLCDBackground = ILI9341_BLUE
    GLCDForeground = ILI9341_WHITE
    GLCDCLS(GLCDBackground)

    Dim x_offset, y_offset  as word
    Dim Linecolour as word
    Dim n_color as byte

    Table Colors as Word
        ILI9341_BLACK
        ILI9341_RED
        ILI9341_GREEN
        ILI9341_BLUE
        ILI9341_WHITE
        ILI9341_PURPLE
        ILI9341_YELLOW
        ILI9341_CYAN
        ILI9341_D_GRAY
        ILI9341_L_GRAY
        ILI9341_SILVER
        ILI9341_MAROON
        ILI9341_OLIVE
        ILI9341_LIME
        ILI9341_AQUA
        ILI9341_TEAL
        ILI9341_NAVY
        ILI9341_FUCHSIA
    End Table

    x_offset=GLCD_WIDTH/2
    y_offset=GLCD_HEIGHT/2
    n_color=18

    do
      ScanHyperbole(x_offset, y_offset,3)

      wait 3 s

      GLCDCLS(GLCDBackground)

    loop


sub ScanHyperbole(x_offset,y_offset, type0)

    'Type0=1 hyperbola alined along x
    'Type0=2 hyperbole alined along y
    'Type0=3 hyperbole alined along x plus iperbole alined along y

    Dim x_offset,y_offset,a_axis, b_axis, ind as word
    Dim color as Word
    Dim n_color,Type0 as Byte

    b_axis=0
    for ind=1 to 100
      b_axis=b_axis+1
      a_axis=2*b_axis
      readtable colors,ind%n_color,color
      if Type0=1 then
        hyperbole(x_offset, y_offset, a_axis, b_axis, 1,Color)
      else if Type0=2 then
          hyperbole(x_offset, y_offset, a_axis, b_axis, 2,Color)
      end if
      if type0=3 then
          hyperbole(x_offset, y_offset, a_axis, b_axis, 1,Color)
          hyperbole(x_offset, y_offset, a_axis, b_axis, 2,Color)
      end if
    next

end sub
sub hyperbole(x_offset, y_offset, a_axis, b_axis, type, optional LineColour=GLCDForeground)

    'Alined along x when type=1
    'alined along y when type=2

    Dim x_offset, y_offset, x_off, y_off  as word
    Dim x_coord, y_coord, x_max, y_max as Word
    Dim a_axis, b_axis, a_sq, b_sq, half_a_sq, half_b_sq as word  'axis smaller than 254
    Dim Linecolour as word
    Dim dist as Long
    Dim a_sq2, b_sq2, a_sq4, b_sq4, half_ab_sq as Long
    Dim x_slope, y_slope as Long
    Dim dist_sign as byte
    Dim type as byte

    if Type=1 then
      x_off=x_offset
      y_off=y_offset
      x_max=GLCD_WIDTH
      y_max=GLCD_HEIGHT
    else
      y_off=x_offset
      x_off=y_offset
      y_max=GLCD_WIDTH
      x_max=GLCD_HEIGHT
    end if

    x_coord=a_axis
    y_coord=0
    a_sq=a_axis*a_axis
    b_sq=b_axis*b_axis
    a_sq2=a_sq+a_sq
    b_sq2=b_sq+b_sq
    a_sq4=a_sq2+a_sq2
    b_sq4=b_sq2+b_sq2
    x_slope=a_sq4*(x_coord+1)
    y_slope=b_sq4             '*(y_coord+1)
    half_a_sq=FNLSR(a_sq,1)
    half_b_sq=FNLSR(b_sq,1)
    half_ab_sq=half_a_sq+half_b_sq
    dist=a_sq2+half_b_sq
    dist_sign=0
    diffvar(dist, b_sq*(1+2*a_axis), dist_sign)

    do  while (dist_sign=1 or (dist_sign=0 and dist<=x_slope)) and ( y_off+y_coord<y_max and x_off+x_coord<x_max)
      if Type = 1 then
        Pset(x_off+x_coord, y_off+y_coord, Linecolour)
        Pset(x_off+x_coord, y_off-y_coord, Linecolour)
        Pset(x_off-x_coord, y_off+y_coord, Linecolour)
        Pset(x_off-x_coord, y_off-y_coord, Linecolour)
      else
        Pset(y_off+y_coord, x_off+x_coord, Linecolour)
        Pset(y_off-y_coord, x_off+x_coord, Linecolour)
        Pset(y_off+y_coord, x_off-x_coord, Linecolour)
        Pset(y_off-y_coord, x_off-x_coord, Linecolour)
      end if
      if dist_sign=0 then
        diffvar (dist, x_slope, dist_sign)
        x_coord=x_coord+1
        x_slope=x_slope+b_sq4
      end if
      sumvar(dist, a_sq2+y_slope, dist_sign)
      y_coord=y_coord+1
      y_slope=y_slope+a_sq4
    Loop

    sumvar(dist,a_sq+b_sq, dist_sign)
    diffvar(dist,FNLSR(x_slope+y_slope,1)+half_ab_sq, dist_sign)

    if a_axis>b_axis then
      do while y_off+y_coord<=y_max and x_off+x_coord<=x_max
      if Type = 1 then
        Pset(x_off+x_coord, y_off+y_coord, Linecolour)
        Pset(x_off+x_coord, y_off-y_coord, Linecolour)
        Pset(x_off-x_coord, y_off+y_coord, Linecolour)
        Pset(x_off-x_coord, y_off-y_coord, Linecolour)
      else
        Pset(y_off+y_coord, x_off+x_coord, Linecolour)
        Pset(y_off-y_coord, x_off+x_coord, Linecolour)
        Pset(y_off+y_coord, x_off-x_coord, Linecolour)
        Pset(y_off-y_coord, x_off-x_coord, Linecolour)
      end if
        if dist_sign=1 then
          sumvar(dist,y_slope,dist_sign)
          y_coord=y_coord+1
          y_slope=y_slope+a_sq4
        end if
        diffvar(dist,b_sq2+x_slope,dist_sign)
        x_coord=x_coord+1
        x_slope=x_slope+b_sq4
      loop
    end if
end sub

sub diffvar(var1, var2, sign)

      'var2 MUST be >=0

  Dim var1, var2 as Long
  Dim sign as Byte

  if sign=0 then
    if var1 > var2 then
      var1=var1-var2
    else
      var1=var2-var1
      sign=1
    end if
  else
    var1=var1+var2
  end if

end sub

sub sumvar(var1, var2, sign)

      'var2 MUST be >=0

  Dim var1, var2 as Long
  Dim sign as Byte

  if sign=0 then
    var1=var1+var2
  else
    if var1 < var2 then
      var1=var2-var1
      sign=0
    else
      var1=var1-var2
      sign=1
    end if
  end if

end sub

