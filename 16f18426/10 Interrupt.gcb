'''
'''******************************************************************
'''  Lesson 10 - "Interrupts and Pull-ups"
'''
'''  This lesson will introduce interrupts and how they are useful. It will
'''  also introduce internal weak pull-ups that are available on most PICs.
'''
'''  It should be noted that this lesson is more efficent than the last
'''  one, "Timer0". Notice how the processor is no longer waiting for
'''  Timer0 to roll over. Instead, we let the hardware modules do the work,
'''  freeing the CPU to do other things in the main loop
'''
'''  The switch is no longer continuously polled for a button press. Instead,
'''  an interrupt will occur which will automically place the program counter
'''  inside of the ISR where we can change directions outisde of normal code execution
'''
'''  LEDs rotate at a constant speed and the switch reverses their direction
'''
'''  PIC: 16f18426
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 29.5.2015
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''

 #chip 16f18426
 #option explicit
 #config MCLRE_OFF

  #define DOWN                0
  #define UP                  1

  #define SWITCH              PORTA.3

  #define LED_RIGHT           1
  #define LED_LEFT            0

  #define PULL_UPS                                  'if this is uncommented, the trace under JP5 can be cut
                                                    'with no affect on the output

  dir portc out
  portc = 0
  portc.3 = 1
  'start with LEDs rotating from right to left
  _direction = LED_RIGHT

  'setup switch (SW1)
  dir switch in

  Dim _DIRECTION as Byte


  #ifdef PULL_UPS
    'enable the weak pull-up for the switch
    WPUA2 = 1
  #endif

' Initialise the timer.
' Firstly tell the compiler to use a 16bit timer for this demonstration
  #define TMR0_16BIT
  TMR0IE = 1
  InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2
  On Interrupt Timer0Overflow Call RotateLEDsNow
  Settimer ( 0 , 0x0bdc  )
  StartTimer 0

  'setup Interrupt
  IOCAN3 = 1
  On Interrupt PORTChange  Call DirChange


  do

  loop

End

sub DirChange

 if IOCAF3 = 1 then

     IOCIE  = 0  ' Disable Port Change Interruts to Prevent renter of the same event
     IOCAF3 = 0  ' Ackowlage the Interrupt by Clearing this Flag
     _direction = !_direction ; Reverse direction
     IOCIE = 1  ' Reenable Port change interrupts
   end if

end sub

sub RotateLEDsNow

  TMR0IF = 0
  if  _direction.0 = LED_RIGHT  then
      'shift to the right by 1
      Set C off
      Rotate portc right

      ' when the last LED is lit, restart the pattern
      if C = 1 then
         portc.3 = 1
      end if

  else
      'shift to the left by 1
      Set C off
      Rotate portc left

      'when the last LED is lit, restart the pattern
      if  portC.4 = 1 then
            portC.0 = 1
            portC.4 = 0
      end if
  end if

  Settimer ( 0 , 0x0bdc  )

end sub
