'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
''' Description  :  Setup ENC28J60, then reads data from the Ethernet stream to a PC terminal.
'''
'''	You NEED a PC terminal connected to the serial out on the microprocessor.
'''
'''@author 		[todo]
'''@licence		GPL
'''@version		[todo]
'''@date   		[todo]
'''********************************************************************************

#Chip 18F4520, 20
#Config Osc = HS
#Config MCLRE = ON

    #include "C:\GCBDev\Dev Drivers\ENC28J60\24032016\18F4520\ENC28J60_006.h"

    'USART settings
    #define USART_BAUD_RATE 9600
    #define USART_BLOCKING
    #define USART_TX_BLOCKING

; ----- Define Hardware settings
    ; ----- Constants
#Define ENC28J60_DI			PortC.4							'Connected to Device SO
#Define ENC28J60_DO			PortC.5							'Connected to Device SI
#Define ENC28J60_SCK		PortC.3							'Connected to Clock
#Define ENC28J60_CS 		PortA.5							'Chip select line
#Define ENC28J60_RESET  PortD.2							'Reset line
#Define Heartbeat 			PortC.2
#Define TX 							PortC.7
#Define RX							PortC.6


; ----- Variables
  ' No Variables specified in this example. All byte variables are defined upon use.

; ----- Quick Command Reference:

; ----- Main body of program commences here.

    HSerPrintCRLF 2
    HserPrint "ENC28J60 Ethernet Driver 006" : HSerPrintCRLF
    HserPrint "Init Test": HSerPrintCRLF

		'Set Key data.  mac, ip address etc.
    ipaddr = 192,168,0,1
    ipport = 80
    ipserver = 192,168,0,249
    macaddr = 0x42, 0x00, 0x33, 0x44, 0x55, 0x65


    ENC28J60_Init ( macaddr )

    'Set address of PHY register to write
    ENC28J60_WriteReg(MIREGADR, PHLCON)


    'Set LEDA for link status display
    'and LEDB for blink fast
'    ENC28J60_WriteReg(MIWRL, 0b01110010)
'    ENC28J60_WriteReg(MIWRH, 0b00000100)

    'Set LEDA
    'and LEDB
    ENC28J60_WriteReg( MIWRL, 0x04 )
    ENC28J60_WriteReg( MIWRH, 0x76 )


    'Adjust the clock out... not really required but you can check the output FREQ to check everythinh is workong ok
    for xx = 1 to 5
      ENC28J60_WriteReg(ECOCON, xx)
    next


		'Display the MAC address. Has MAC address been saved? Display the MAC address
    HserPrint         "Mac Address:         "
    HserPrint hex(ENC28J60_ReadReg(MAADR1))+"-"
    HserPrint hex(ENC28J60_ReadReg(MAADR0))+"-"
    HserPrint hex(ENC28J60_ReadReg(MAADR3))+"-"
    HserPrint hex(ENC28J60_ReadReg(MAADR2))+"-"
    HserPrint hex(ENC28J60_ReadReg(MAADR5))+"-"
    HserPrint hex(ENC28J60_ReadReg(MAADR4)): HSerPrintCRLF


		'Show packets on the wire - move to library later.
    do

        if (ENC28J60_ReadReg(EPKTCNT) = 1 ) then '* We received a packet
        '		data = stack_read() 'Call our stack layer to receive it

            ENC28J60_Select
            FastHWSPITransfer  0b00111010, temp

           for xx = 1 to 6
                  Set WCOL Off
                  'Put byte to send into buffer
                  'Will start transfer
                  SSPBUF = ENC28J60_READ_CTRL_REG | ( addr AND ADDR_MASK )

                  'Read buffer
                  Wait While BF = Off


                  Set BF Off

            next


            ' Read bytes
            HSerPrint "Destination address: "
            for xx = 1 to 6
                  Set WCOL Off
                  'Put byte to send into buffer
                  'Will start transfer
                  SSPBUF = ENC28J60_READ_CTRL_REG | ( addr AND ADDR_MASK )

                  'Read buffer
                  Wait While BF = Off

                  HSerPrint hex(SSPBUF)
                  Set BF Off
                  if xx < 6 then HSerPrint "-"
            next

            HSerPrintCRLF
            HSerPrint "Source address:      "
            for xx = 1 to 6
                  Set WCOL Off
                  'Put byte to send into buffer
                  'Will start transfer
                  SSPBUF = ENC28J60_READ_CTRL_REG | ( addr AND ADDR_MASK )

                  'Read buffer
                  Wait While BF = Off

                  HSerPrint hex(SSPBUF)
                  Set BF Off
                  if xx < 6 then HSerPrint "-"
            next

            HSerPrintCRLF
            HSerPrint "Type/Length:         "

            Set WCOL Off
            'Put byte to send into buffer
            'Will start transfer
            SSPBUF = ENC28J60_READ_CTRL_REG | ( addr AND ADDR_MASK )
            'Read buffer
            Wait While BF = Off
            temp = SSPBUF
            HSerPrint hex(temp)
            Set WCOL Off
            'Put byte to send into buffer
            'Will start transfer
            SSPBUF = ENC28J60_READ_CTRL_REG | ( addr AND ADDR_MASK )
            'Read buffer
            Wait While BF = Off
            framelength = SSPBUF
            Set BF Off
            HSerPrint hex(framelength)
            HSerPrintCRLF

            for xx = 14 to 59
                  Set WCOL Off
                  'Put byte to send into buffer
                  'Will start transfer
                  SSPBUF = ENC28J60_READ_CTRL_REG | ( addr AND ADDR_MASK )

                  'Read buffer
                  Wait While BF = Off

                  HSerPrint SSPBUF
                  Set BF Off
                  HSerPrint ","
            next
            HSerPrintCRLF

        'Finish SPI command
        ENC28J60_DeSelect

        'Process received data here

        'Decrease packet received counter
        ENC28J60_Select
        FastHWSPITransfer(BFSCMD | ECON2, temp)
        FastHWSPITransfer(EPKTDEC , temp)
        ENC28J60_Deselect

        else
		        '	HSerPrint "."
        end if

    loop

    end
; ----- Support methods.  Subroutines and Functions
