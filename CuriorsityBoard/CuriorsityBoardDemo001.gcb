'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is intended to show the capabilities of Curiosity Board
'''This program uses the software implementation for the Microchip microprocessors.
'''The hardware serial connections are shown in the program but this is a hardware specific solution.
''':
'''This will show the 10 demonstrations sequencially. Press the button to proceed to the next demonstration.
''':
'''@author  EvanV
'''@licence GPL
'''@version 1.0a
'''@date    10.02.18
'''********************************************************************************


#chip 16F1829, 0.5
#config WDTE=SWDTEN, LVP=ON
#option Explicit

'Initialise the hardware for serial communications
    'Initialise Module: USART
    #ifdef var(PPSLOCK)
        RC4PPS = 0x0014    'TX > RC6  this register may change for a specific microprocessor.
    #endif
    'USART settings
    #define USART_BAUD_RATE 9600
    #define USART_TX_BLOCKING


'Define constants for the ports, and set the direction
    #define S1_PORT      portc.0
    #define LED_D4_LAT   portb.4
    #define LED_D5_LAT   portb.5
    #define LED_D6_LAT   portb.6
    #define LED_D7_LAT   portb.7
    #define CCP1_PORT    portc.5   'CCP1 port
    #define ADCPORT      AN2       'ADC port

    dir S1_PORT          In
    dir LED_D4_LAT       Out
    dir LED_D5_LAT       Out
    dir LED_D6_LAT       Out
    dir LED_D7_LAT       Out

'Define constants that the demos use a macros
    #define LED_D4_SetHigh  LED_D4_LAT = On
    #define LED_D4_Toggle   LED_D4_LAT = !LED_D4_LAT

'Define constant value - do not change
    #define LOW                 0
    #define HIGH                1
    #define PRESSED             1
    #define NOT_PRESSED         0
    #define RUNNING             1
    #define NOT_RUNNING         0
    #define OVERFLOW            3
    #define LAST                16

'Define variables and Initialise
    dim g_rotateReg, g_labNumber, g_switchEvent,g_labState, g_btnState, g_lastcasechoice  as byte
    g_labNumber = 0
    g_switchEvent = 0
    g_lastcasechoice = 0
    g_labState = NOT_RUNNING
    g_btnState = NOT_PRESSED

'The main application
    HSerPrintCRLF 2
    HSerPrint "Curiosity Board Labs: "
    HSerPrint ChipNameStr
    HSerPrintCRLF 2
    FlashLEDs()
    HSerPrintStringCRLF "Ready .."

    do forever

          checkButtonS1()

          'Display which is the demo is use
          if g_lastcasechoice <> g_labNumber then
              HSerPrintStringCRLF "Lab Number: " + str( g_labNumber )
              g_lastcasechoice = g_labNumber
          end if

          select case g_labNumber
              case 1:
                HelloWorld()

              case 2:
                BlinkLED()

              case 3:
                RotateLEDS()

              case 4:
                ADC2LEDs()

              case 5:
                VSRLEDs()

              case 6:
                PWM2LEDs()

              case 7:
                TimerLEDs()

              case 8:
                Interrupt2LEDs()

              case 9:
                SleepWakeUp2LEDs()

              case 10:
                'increment the lab counter - do this because there are chips that do not support HEF or EEPROM
                g_labNumber++
                #ifdef ChipEEProm 0
                  'Check the HEF memory is avaiable
                  #ifdef bit(CFGS)
                      HEF2LEDs()
                      g_labNumber---    'revert this counter as we executed a lab
                  #endif
                #endif
                #ifndef ChipEEProm 0
                  EEPROM2LEDs()
                  g_labNumber--    'revert this counter as we executed a lab
                #endif


          end select

          if (g_switchEvent) then
              nextLab()
          end if

    loop

'Methods - these are all ported from the C version in the demonstration archive

    sub checkButtonS1()
        'Check if S1 is previously down (pressed).
        if ( g_btnState = NOT_PRESSED ) then
            'Check if S1 is LOW (pressed)
            if ( S1_PORT = OFF ) then
                g_btnState = PRESSED

                'Show the LED is depressed
                LED_D4_LAT = On
                LED_D5_LAT = On
                LED_D6_LAT = On
                LED_D7_LAT = On
                wait while S1_PORT = OFF
                LED_D4_LAT = OFF
                LED_D5_LAT = OFF
                LED_D6_LAT = OFF
                LED_D7_LAT = OFF
            end if

        else
            'Check if S1 is high (not pressed)
            if ( S1_PORT = ON ) then
                'Change the button's state to NOT_PRESSED
                g_btnState = NOT_PRESSED
                'Indicate a switch event
                g_switchEvent = 1
            end if

        end if
    end sub

    sub nextLab
        g_switchEvent = 0
        g_labNumber++

        if ( g_labNumber = 11 ) then
            g_labNumber = 1
        end if
    end sub

    sub HelloWorld()

        if ( g_labState <> RUNNING )  then
            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF
            g_labState = RUNNING
        end if

        if ( g_labState = RUNNING ) then
            LED_D4_SetHigh  'use a macro to set the Port High
        end if

        ' Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            g_labState = NOT_RUNNING
        end if
    end sub

    sub FlashLEDs()

            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

            wait 2 s

            Repeat 20
                LED_D4_LAT = !LED_D4_LAT
                LED_D6_LAT = !LED_D6_LAT
                LED_D5_LAT = !LED_D5_LAT
                LED_D7_LAT = !LED_D7_LAT
                wait 100 ms
            end Repeat

            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

    end sub
    sub BlinkLED()

        dim l_counter as byte

        if ( g_labState <> RUNNING ) then
            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF
            g_labState = RUNNING
        end if

        if ( g_labState = RUNNING ) then

            'Wait for 1.5 sec delay
            wait 1500 ms
            LED_D4_Toggle

        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            g_labState = NOT_RUNNING
        end if

    end sub

    sub RotateLEDs()

        if ( g_labState <> RUNNING ) then
            LED_D4_LAT = ON
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

            'Initialize temporary register to begin at 1
            g_rotateReg = 1

            g_labState = RUNNING;
        end if

        if ( g_labState = RUNNING ) then

            wait 500 ms

            rotate g_rotateReg left simple

            ' If the last LED has been lit, restart the pattern
            if ( g_rotateReg = LAST ) then
                g_rotateReg = 1
            end if

            'Determine which LED will light up
            'ie. which bit in the register the 1 has rotated to.
            LED_D4_LAT = g_rotateReg.0
            LED_D5_LAT = g_rotateReg.1
            LED_D6_LAT = g_rotateReg.2
            LED_D7_LAT = g_rotateReg.3

        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            g_labState = NOT_RUNNING
        end if

    end sub

    sub ADC2LEDs()

        dim l_adcResult as byte

        if ( g_labState <> RUNNING) then
            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF
            g_labState = RUNNING
        end if

        if ( g_labState = RUNNING) then
            'Get the top 4 MSBs and display it on the LEDs
            l_adcResult = ReadAD( ADCPORT ) / 16

            'Determine which LEDs will light up
            LED_D4_LAT = l_adcResult.0
            LED_D5_LAT = l_adcResult.1
            LED_D6_LAT = l_adcResult.2
            LED_D7_LAT = l_adcResult.3
        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            g_labState = NOT_RUNNING
        end if

    end sub



    sub VSRLEDs()
        dim l_delay as byte

        if ( g_labState <> RUNNING ) then
            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

            'Initialize temporary register to begin at 1
            g_rotateReg = 1

            g_labState = RUNNING
        end if

        if ( g_labState = RUNNING ) then

            l_delay = ReadAD( ADCPORT ) / 4

            wait 5 ms

            'Delay 2 ms until l_delay decrements to 0
            do while ( l_delay <> 0)
               wait 2 ms
               l_delay--
            loop

            'Determine which LED will light up
            'ie. which bit in the register the 1 has rotated to.
            LED_D4_LAT = g_rotateReg.0
            LED_D5_LAT = g_rotateReg.1
            LED_D6_LAT = g_rotateReg.2
            LED_D7_LAT = g_rotateReg.3

            rotate g_rotateReg left simple

            ' If the last LED has been lit, restart the pattern
            if ( g_rotateReg = LAST ) then
                g_rotateReg = 1
            end if

        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            g_labState = NOT_RUNNING
        end if

    end sub



    sub PWM2LEDs()

        dim l_adcResult as byte

        if ( g_labState <> RUNNING ) then
            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF
            dir CCP1_PORT out
            'Set LEDs as output of CCP1 using PPS
            #ifdef var(PPSLOCK)
                RC5PPS = 0x000C                    'this register may change for a specific microprocessor.

                'Module: CCP1
                RB4PPS = 0x000C    'CCP1 > RB4      this register may change for a specific microprocessor.
                RB5PPS = 0x000C    'CCP1 > RB5      this register may change for a specific microprocessor.
                RB6PPS = 0x000C    'CCP1 > RB6      this register may change for a specific microprocessor.
                RB7PPS = 0x000C    'CCP1 > RB7      this register may change for a specific microprocessor.
            #endif
            g_labState = RUNNING
        end if

        if ( g_labState = RUNNING ) then
            'Start ADC conversion
            #define ADSpeed LowSpeed
            l_adcResult = ReadAD( ADCPORT )

            'Make the adcResult the PWM duty cycle
            HPWM 1, 10, l_adcResult

            'Make sure the ADC is NOT read every few nano seconds, so, wait 1 ms
            wait 1 ms
        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            HPWMOff               'turn off CCP channel 1

            'Restore to normal output
            #ifdef var(PPSLOCK)
                RC5PPS = 0x00      'this register may change for a specific microprocessor.

                'Module: CCP1
                RB4PPS = 0x00      'this register may change for a specific microprocessor.
                RB5PPS = 0x00      'this register may change for a specific microprocessor.
                RB6PPS = 0x00      'this register may change for a specific microprocessor.
                RB7PPS = 0x00      'this register may change for a specific microprocessor.
            #endif
            g_labState = NOT_RUNNING
        end if
    end sub


    sub TimerLEDs()

        if ( g_labState <> RUNNING ) then
            LED_D4_LAT = ON
            LED_D5_LAT = ON
            LED_D6_LAT = ON
            LED_D7_LAT = ON

            ' Initialize the timer, set the initial value and start the timer.
            InitTimer1 Osc, PS_1
            #define Timer1ReloadValue 0x0BDC
            SetTimer 1, Timer1ReloadValue
            StartTimer 1

            LED_D4_LAT = ON
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

            'Initialize temporary register to begin at 1
            g_rotateReg = 1

            g_labState = RUNNING
        end if

        if ( g_labState = RUNNING ) then

            'Wait for Timer1 to overflow. When timer1 overflows TMR1IF will be set to 1
            wait while ( TMR1IF <> 1 )
            SetTimer 1, Timer1ReloadValue

            rotate g_rotateReg left simple

            ' If the last LED has been lit, restart the pattern
            if ( g_rotateReg = LAST ) then
                g_rotateReg = 1
            end if

            'Determine which LEDs will light up
            LED_D4_LAT = g_rotateReg.0
            LED_D5_LAT = g_rotateReg.1
            LED_D6_LAT = g_rotateReg.2
            LED_D7_LAT = g_rotateReg.3

            'Clear the timer
            TMR1IF = 0

        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            StopTimer 1
            g_labState = NOT_RUNNING
        end if

    end sub

    Sub Interrupt2LEDs()

        if ( g_labState <> RUNNING ) then

            LED_D4_LAT = ON
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

            g_rotateReg = 1

            'Enable the TMR0 Interrupts
            InitTimer0 Osc, PS0_256
            On Interrupt Timer0Overflow call LAB_ISR

            g_labState = RUNNING

        end if

        'there is not middle handler?  why? The middle handler is the Interrupt routine LAB_ISR()

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            'Disable the TMR0 Interrupts
            On Interrupt Timer0Overflow ignore

            g_labState = NOT_RUNNING

        end if
    end sub

    Sub LAB_ISR()
        'Clear timer0 event
        TMR0IF = 0

        'If the last LED has been lit, restart the pattern
        if ( g_rotateReg = 1 ) then
            g_rotateReg = LAST
        end if

        rotate g_rotateReg right simple

        'Determine which LEDs will light up
        LED_D4_LAT = g_rotateReg.0
        LED_D5_LAT = g_rotateReg.1
        LED_D6_LAT = g_rotateReg.2
        LED_D7_LAT = g_rotateReg.3

    end sub


    sub SleepWakeUp2LEDs()

        if ( g_labState <> RUNNING )  then
            LED_D4_LAT = ON
            LED_D6_LAT = ON
            LED_D5_LAT = OFF
            LED_D7_LAT = OFF

            'Enable Watchdog Timer
            'Initially WDTPS 1:131072 & SWDTEN OFF by setting the register byte value
             WDTCON = 0x18
            'Enable SWDTEN by setting the bit value
            #samevar wdtcon, wdtcon0
            WDTCON.SWDTEN = 1

            Sleep

            g_labState = RUNNING

        end if

        if ( g_labState = RUNNING ) then
            'Wait 4 seconds for the WDT time out
            'and reverse the states of the LEDs
            LED_D4_LAT = !LED_D4_LAT
            LED_D6_LAT = !LED_D6_LAT
            LED_D5_LAT = !LED_D5_LAT
            LED_D7_LAT = !LED_D7_LAT
            Sleep

        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then

            'Disable Watchdog Timer
            if ( WDTCON.SWDTEN = 1 ) then
                WDTCON.SWDTEN = 0
            end if

            g_labState = NOT_RUNNING
        end if
    end sub


    sub HEF2LEDS ()

        #include <heflash.h>

        if ( g_labState <> RUNNING ) then
            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

            g_labState = RUNNING

        end if

        if ( g_labState = RUNNING)  Then
            dim writeData as byte
            'the data value to be saved
            writeData = 0x05

            dim HefAddr as byte
            'HEF location, a value between 0 and 127 for the 128 HEF memory
            HefAddr = 0x01

            HEFWrite ( HefAddr, writeData )

            'ensure value is cleared
            writeData = 0x00

            'Read back value and then subsuently display on LEDs
            HEFRead ( HefAddr, writeData )

            'Determine which LEDs will light up
            LED_D4_LAT = writeData.0
            LED_D5_LAT = writeData.1
            LED_D6_LAT = writeData.2
            LED_D7_LAT = writeData.3

        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            g_labState = NOT_RUNNING
        end if

    end sub


    sub EEPROM2LEDs()

    dim l_adcResult as byte

        if ( g_labState <> RUNNING ) then
            LED_D4_LAT = OFF
            LED_D5_LAT = OFF
            LED_D6_LAT = OFF
            LED_D7_LAT = OFF

            g_labState = RUNNING

        end if

        if ( g_labState = RUNNING)  Then
            dim l_eeAddr, writeData as byte

            'EEProm location, a value between 0 and 127 for the 128 EEProm memory
            l_eeAddr = 0x00

            'Get the top 4 MSBs of the ADC and write them to EEPROM
            l_adcResult = ReadAD( ADCPORT ) / 16
            EPWrite l_eeAddr, l_adcResult

            'ensure value is cleared
            writeData = 0x00

            'Read back value and then subsuently display on LEDs
            EPWrite l_eeAddr, writeData

            'Determine which LEDs will light up
            LED_D4_LAT = writeData.0
            LED_D5_LAT = writeData.1
            LED_D6_LAT = writeData.2
            LED_D7_LAT = writeData.3

        end if

        'Check if a switch event occurs
        if ( g_switchEvent = 1 ) then
            g_labState = NOT_RUNNING
        end if

    end sub
